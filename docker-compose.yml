services:
  db:
    container_name: postgres-test
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db:/data/postgres
    ports:
      - "${DB_PORT}:5432"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  migrations:
    container_name: migrations
    build:
      context: ./db/migrations
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db
    profiles:
      - migrations
      - app

  go-api:
    container_name: go-api
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      DBSTRING: host=db port=${DB_PORT} user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_NAME} sslmode=${DB_SSLMODE}
    ports:
      - "8080:8080"
    depends_on:
      migrations:
        condition: service_completed_successfully
    networks:
      - db
    restart: on-failure
    profiles:
      - api
      - app

networks:
  db:
    driver: bridge

volumes:
  db:
